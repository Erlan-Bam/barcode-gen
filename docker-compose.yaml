services:
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092' # client listener
      - '9093:9093' # controller listener
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      # Good enough: wait until port 9092 is accepting connections
      test:
        [
          'CMD',
          'bash',
          '-lc',
          'exec 3<>/dev/tcp/127.0.0.1/9092 && echo -e > /dev/null 2>&1',
        ]
      interval: 5s
      timeout: 5s
      retries: 24
      start_period: 20s

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - '3000:3000'
    env_file:
      - .env

volumes:
  redis_data:
